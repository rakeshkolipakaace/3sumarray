

# name: Run Code Tests

# on:
#   push:
#     paths:
#       - "solutions/**"
#   pull_request:
#     paths:
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2  # Ensure previous commit is available

#       - name: Detect Changed Files
#         id: changed-files
#         run: |
#           BEFORE_COMMIT="${{ github.event.before }}"
#           if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
#             BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
#           fi
          
#           CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/')
#           echo "Detected changed files: $CHANGED_FILES"
          
#           if [ -z "$CHANGED_FILES" ]; then
#             echo "No file changes detected in solutions/ directory. Exiting..."
#             exit 1
#           fi

#           echo "CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV

#       - name: Check for Empty Implementations
#         id: check-implementation
#         run: |
#           INCOMPLETE_FILES=""
#           for file in $CHANGED_FILES; do
#             echo "Checking file: $file"
#             if [[ "$file" == *.c || "$file" == *.cpp ]]; then
#               if ! grep -qE '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s+\**[a-zA-Z_][a-zA-Z0-9_]*\s*\(.*\)\s*\{[^}]*[^/]*$' "$file"; then
#                 INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#               fi
#             elif [[ "$file" == *.py ]]; then
#               if grep -qE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file"; then
#                 LINE_NUM=$(grep -nE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file" | cut -d: -f1)
#                 if ! tail -n +$LINE_NUM "$file" | grep -vE '^\s*("""|\#)' | grep -qE '^\s*(return\s|if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
#                   INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                 fi
#               fi
#             elif [[ "$file" == *.java ]]; then
#               if grep -qE '^\s*public\s+List<List<Integer>>\s+threeSum\s*\(int\[\]\s+nums\)\s*\{' "$file"; then
#                 LINE_NUM=$(grep -nE '^\s*public\s+List<List<Integer>>\s+threeSum\s*\(int\[\]\s+nums\)\s*\{' "$file" | cut -d: -f1)
#                 END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
#                 if [ -n "$END_LINE" ]; then
#                   IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 2)) | grep -vE '^\s*(//|/\*.*\*/$|^$)' | grep -E '^\s*[^\s#].*')
#                   # Count non-comment lines and check for substantial logic
#                   LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
#                   if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
#                     INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                   fi
#                 else
#                   INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                 fi
#               fi
#             fi
#           done
        
#           if [ -n "$INCOMPLETE_FILES" ]; then
#             echo "Some files only contain function signatures without implementation: $INCOMPLETE_FILES"
#             exit 1
#           fi

#       - name: Determine File Type
#         id: determine-file
#         run: |
#           DETECTED_LANGUAGES=""
#           for file in $CHANGED_FILES; do
#             case "$file" in
#               *.c) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C " ;;
#               *.cpp) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C++ " ;;
#               *.py) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Python " ;;
#               *.java) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Java " ;;
#             esac
#           done

#           DETECTED_LANGUAGES=$(echo "$DETECTED_LANGUAGES" | xargs)
#           echo "LANGUAGE=$DETECTED_LANGUAGES" >> $GITHUB_ENV
#           echo "Detected languages: $DETECTED_LANGUAGES"

#       - name: Install Dependencies
#         run: |
#           sudo apt update
#           sudo apt install -y gcc g++ python3 openjdk-17-jdk

#       - name: Compile and Run C Tests
#         if: contains(env.LANGUAGE, 'C')
#         run: |
#           if [ -f tests/test.c ]; then
#             gcc tests/test.c solutions/solution.c -o test_runner
#             echo "Running C Test Cases..."
#             ./test_runner | tee -a test_results.log
#           else
#             echo "No C test file found."
#           fi

#       - name: Compile and Run C++ Tests
#         if: contains(env.LANGUAGE, 'C++')
#         run: |
#           if [ -f tests/test.cpp ]; then
#             g++ tests/test.cpp solutions/solution.cpp -o test_runner_cpp
#             echo "Running C++ Test Cases..."
#             ./test_runner_cpp | tee -a test_results.log
#           else
#             echo "No C++ test file found."
#           fi

#       - name: Run Python Tests
#         if: contains(env.LANGUAGE, 'Python')
#         run: |
#           if [ -f tests/test.py ]; then
#             echo "Running Python Test Cases..."
#             python3 tests/test.py | tee -a test_results.log
#           else
#             echo "No Python test file found."
#           fi

#       - name: Compile and Run Java Tests
#         if: contains(env.LANGUAGE, 'Java')
#         run: |
#           if [ -f tests/Test.java ]; then
#             mkdir -p out
#             javac -d out tests/Test.java solutions/Solution.java
#             echo "Running Java Test Cases..."
#             java -cp out tests.Test | tee -a test_results.log
#           else
#             echo "No Java test file found."
#           fi

#       - name: Upload Test Results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: test_results.log



# #actual code

# name: Run Code Tests

# on:
#   push:
#     paths:
#       - "solutions/**"
#   pull_request:
#     paths:
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2  # Ensure previous commit is available

#       - name: Detect Changed Files
#         id: changed-files
#         run: |
#           BEFORE_COMMIT="${{ github.event.before }}"
#           if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
#             BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
#           fi
          
#           CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/')
#           echo "Detected changed files: $CHANGED_FILES"
          
#           if [ -z "$CHANGED_FILES" ]; then
#             echo "No file changes detected in solutions/ directory. Exiting..."
#             exit 1
#           fi

#           echo "CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV

#       - name: Check for Empty Implementations
#         id: check-implementation
#         run: |
#           INCOMPLETE_FILES=""
#           for file in $CHANGED_FILES; do
#             echo "Checking file: $file"
#             if [[ "$file" == *.c || "$file" == *.cpp ]]; then
#               if grep -qE '^\s*int\*\*\s+threeSum\s*\(int\*\s+nums,\s*int\s+numsSize,\s*int\*\s+returnSize,\s*int\*\*\s+returnColumnSizes\)\s*\{' "$file"; then
#                 LINE_NUM=$(grep -nE '^\s*int\*\*\s+threeSum\s*\(int\*\s+nums,\s*int\s+numsSize,\s*int\*\s+returnSize,\s*int\*\*\s+returnColumnSizes\)\s*\{' "$file" | cut -d: -f1)
#                 END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
#                 if [ -n "$END_LINE" ]; then
#                   IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 2)) | grep -vE '^\s*(//|/\*.*\*/$|^$)' | grep -E '^\s*[^\s#].*')
#                   LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
#                   if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
#                     INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                   fi
#                 else
#                   INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                 fi
#               fi
#             elif [[ "$file" == *.py ]]; then
#               if grep -qE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file"; then
#                 LINE_NUM=$(grep -nE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file" | cut -d: -f1)
#                 if ! tail -n +$LINE_NUM "$file" | grep -vE '^\s*("""|\#)' | grep -qE '^\s*(return\s|if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
#                   INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                 fi
#               fi
#             elif [[ "$file" == *.java ]]; then
#               if grep -qE '^\s*public\s+List<List<Integer>>\s+threeSum\s*\(int\[\]\s+nums\)\s*\{' "$file"; then
#                 LINE_NUM=$(grep -nE '^\s*public\s+List<List<Integer>>\s+threeSum\s*\(int\[\]\s+nums\)\s*\{' "$file" | cut -d: -f1)
#                 END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
#                 if [ -n "$END_LINE" ]; then
#                   IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 2)) | grep -vE '^\s*(//|/\*.*\*/$|^$)' | grep -E '^\s*[^\s#].*')
#                   LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
#                   if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
#                     INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                   fi
#                 else
#                   INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
#                 fi
#               fi
#             fi
#           done
        
#           if [ -n "$INCOMPLETE_FILES" ]; then
#             echo "Some files only contain function signatures without implementation: $INCOMPLETE_FILES"
#             exit 1
#           fi

#       - name: Determine File Type
#         id: determine-file
#         run: |
#           DETECTED_LANGUAGES=""
#           for file in $CHANGED_FILES; do
#             case "$file" in
#               *.c) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C " ;;
#               *.cpp) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C++ " ;;
#               *.py) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Python " ;;
#               *.java) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Java " ;;
#             esac
#           done

#           DETECTED_LANGUAGES=$(echo "$DETECTED_LANGUAGES" | xargs)
#           echo "LANGUAGE=$DETECTED_LANGUAGES" >> $GITHUB_ENV
#           echo "Detected languages: $DETECTED_LANGUAGES"

#       - name: Install C Dependencies
#         if: contains(env.LANGUAGE, 'C')
#         run: |
#           sudo apt update
#           sudo apt install -y gcc

#       - name: Install C++ Dependencies
#         if: contains(env.LANGUAGE, 'C++')
#         run: |
#           sudo apt update
#           sudo apt install -y g++

#       - name: Install Python Dependencies
#         if: contains(env.LANGUAGE, 'Python')
#         run: |
#           sudo apt update
#           sudo apt install -y python3

#       - name: Install Java Dependencies
#         if: contains(env.LANGUAGE, 'Java')
#         run: |
#           sudo apt update
#           sudo apt install -y openjdk-17-jdk

#       - name: Compile and Run C Tests
#         if: contains(env.LANGUAGE, 'C')
#         run: |
#           if [ -f tests/test.c ]; then
#             gcc tests/test.c solutions/solution.c -o test_runner
#             echo "Running C Test Cases..."
#             ./test_runner | tee -a test_results.log
#           else
#             echo "No C test file found."
#           fi

#       - name: Compile and Run C++ Tests
#         if: contains(env.LANGUAGE, 'C++')
#         run: |
#           if [ -f tests/test.cpp ]; then
#             g++ tests/test.cpp solutions/solution.cpp -o test_runner_cpp
#             echo "Running C++ Test Cases..."
#             ./test_runner_cpp | tee -a test_results.log
#           else
#             echo "No C++ test file found."
#           fi

#       - name: Run Python Tests
#         if: contains(env.LANGUAGE, 'Python')
#         run: |
#           if [ -f tests/test.py ]; then
#             echo "Running Python Test Cases..."
#             python3 tests/test.py | tee -a test_results.log
#           else
#             echo "No Python test file found."
#           fi

#       - name: Compile and Run Java Tests
#         if: contains(env.LANGUAGE, 'Java')
#         run: |
#           if [ -f tests/Test.java ]; then
#             mkdir -p out
#             javac -d out tests/Test.java solutions/Solution.java
#             echo "Running Java Test Cases..."
#             java -cp out tests.Test | tee -a test_results.log
#           else
#             echo "No Java test file found."
#           fi

#       - name: Upload Test Results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: test_results.log



# morning

name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || [ "$BEFORE_COMMIT" == "0000000000000000000000000000000000000000" ]; then
            BEFORE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/' || true)
          echo "Changed files: $CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No solution changes detected. Stopping workflow."
            exit 1
          fi

          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Detect Language
        run: |
          LANGUAGE=""
          for file in $CHANGED_FILES; do
            case "$file" in
              *.c) LANGUAGE="C" ;;
              *.cpp) LANGUAGE="C++" ;;
              *.py) LANGUAGE="Python" ;;
              *.java) LANGUAGE="Java" ;;
            esac
          done
          
          if [ -z "$LANGUAGE" ]; then
            echo "No supported language found. Stopping workflow."
            exit 1
          fi

          echo "LANGUAGE=$LANGUAGE" >> $GITHUB_ENV
          echo "Chosen language: $LANGUAGE"

      - name: Install Dependencies
        run: |
          sudo apt update
          case "$LANGUAGE" in
            "C") sudo apt install -y gcc ;;
            "C++") sudo apt install -y g++ ;;
            "Python") sudo apt install -y python3 ;;
            "Java") sudo apt install -y openjdk-17-jdk-headless ;;
          esac

      - name: Run Tests
        run: |
          case "$LANGUAGE" in
            "C")
              if [ -f tests/test.c ]; then
                gcc tests/test.c solutions/solution.c -o test_runner
                ./test_runner | tee test_results.log
              else
                echo "No C test file found."
              fi
              ;;
            "C++")
              if [ -f tests/test.cpp ]; then
                g++ -std=c++17 tests/test.cpp -o test_runner
                ./test_runner | tee test_results.log
              else
                echo "No C++ test file found."
              fi
              ;;
            "Python")
              if [ -f tests/test.py ]; then
                python3 tests/test.py | tee test_results.log
              else
                echo "No Python test file found."
              fi
              ;;
            "Java")
              if [ -f tests/Test.java ]; then
                mkdir -p out
                javac -d out tests/Test.java solutions/Solution.java
                java -cp out tests.Test | tee test_results.log
              else
                echo "No Java test file found."
              fi
              ;;
          esac

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.log
