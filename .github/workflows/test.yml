# name: Run Code Tests

# on:
#   push:
#     paths:
#       - "solutions/**"
#   pull_request:
#     paths:
#       - "tests/**"

# jobs:
#   run-tests:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 2  # Ensure previous commit is available

#       - name: Detect Changed Files
#         id: changed-files
#         run: |
#           BEFORE_COMMIT="${{ github.event.before }}"
#           if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
#             BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
#           fi
          
#           CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/' || true)
#           echo "Detected changed files: $CHANGED_FILES"

#           if [ -z "$CHANGED_FILES" ]; then
#             echo "No file changes detected. Exiting..."
#             exit 0  # Change exit 1 to exit 0 to avoid failure
#           fi

#           echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
#           echo "::set-output name=changed_files::$CHANGED_FILES"

#       - name: Determine File Type
#         id: determine-file
#         run: |
#           for file in $CHANGED_FILES; do
#             case "$file" in
#               *.c) echo "language=C" >> $GITHUB_ENV ;;
#               *.cpp) echo "language=C++" >> $GITHUB_ENV ;;
#               *.py) echo "language=Python" >> $GITHUB_ENV ;;
#               *.java) echo "language=Java" >> $GITHUB_ENV ;;
#             esac
#           done

#       # Install dependencies based on file type
#       - name: Install C Dependencies
#         if: env.language == 'C'
#         run: sudo apt update && sudo apt install -y gcc

#       - name: Install C++ Dependencies
#         if: env.language == 'C++'
#         run: sudo apt update && sudo apt install -y g++

#       - name: Install Python Dependencies
#         if: env.language == 'Python'
#         run: sudo apt update && sudo apt install -y python3 python3-pip

#       - name: Install Java Dependencies
#         if: env.language == 'Java'
#         run: sudo apt update && sudo apt install -y openjdk-17-jdk

#       # Run tests based on file type
#       - name: Compile and Run C Tests
#         if: env.language == 'C'
#         run: |
#           gcc tests/test.c -o test_runner
#           echo "Running C Test Cases..."
#           ./test_runner | tee test_results.log

#       - name: Compile and Run C++ Tests
#         if: env.language == 'C++'
#         run: |
#           g++ tests/test.cpp -o test_runner_cpp
#           echo "Running C++ Test Cases..."
#           ./test_runner_cpp | tee test_results.log

#       - name: Run Python Tests
#         if: env.language == 'Python'
#         run: |
#           echo "Running Python Test Cases..."
#           python3 -m unittest discover -s tests -p "*.py" | tee test_results.log

#       - name: Compile and Run Java Tests
#         if: env.language == 'Java'
#         run: |
#           javac tests/Test.java
#           echo "Running Java Test Cases..."
#           java -cp tests Test | tee test_results.log

#       - name: Upload Test Results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: test_results.log






name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
      - "tests/**"
  pull_request:
    paths:
      - "solutions/**"
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure previous commit is available

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep -E '^(solutions|tests)/' || true)
          echo "Detected changed files: $CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected. Exiting..."
            exit 0
          fi

          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
          echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Determine File Type
        id: determine-file
        run: |
          # Split CHANGED_FILES into an array and iterate over it
          IFS=' ' read -r -a files <<< "$CHANGED_FILES"
          for file in "${files[@]}"; do
            case "$file" in
              *.c) echo "language=C" >> $GITHUB_ENV ;;
              *.cpp) echo "language=C++" >> $GITHUB_ENV ;;
              *.py) echo "language=Python" >> $GITHUB_ENV ;;
              *.java) echo "language=Java" >> $GITHUB_ENV ;;
            esac
          done

      # Install dependencies based on file type
      - name: Install C Dependencies
        if: env.language == 'C'
        run: sudo apt update && sudo apt install -y gcc

      - name: Install C++ Dependencies
        if: env.language == 'C++'
        run: sudo apt update && sudo apt install -y g++

      - name: Install Python Dependencies
        if: env.language == 'Python'
        run: sudo apt update && sudo apt install -y python3 python3-pip

      - name: Install Java Dependencies
        if: env.language == 'Java'
        run: sudo apt update && sudo apt install -y openjdk-17-jdk

      # Run tests based on file type
      - name: Compile and Run C Tests
        if: env.language == 'C'
        run: |
          gcc tests/test.c -o test_runner
          echo "Running C Test Cases..."
          ./test_runner | tee test_results.log

      - name: Compile and Run C++ Tests
        if: env.language == 'C++'
        run: |
          g++ tests/test.cpp -o test_runner_cpp
          echo "Running C++ Test Cases..."
          ./test_runner_cpp | tee test_results.log

      - name: Set PYTHONPATH
        if: env.language == 'Python'
        run: echo "PYTHONPATH=$PYTHONPATH:$PWD" >> $GITHUB_ENV

      - name: Run Python Tests
        if: env.language == 'Python'
        run: |
          echo "Running Python Test Cases..."
          python3 -m unittest discover -s tests -p "*.py" | tee test_results.log

      - name: Compile and Run Java Tests
        if: env.language == 'Java'
        run: |
          javac tests/Test.java
          echo "Running Java Test Cases..."
          java -cp tests Test | tee test_results.log

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.log